!! Lesson 3b – A design intermezzo

In this chapter we revisit previous code to make it nicer and more object-oriented. 


!!!Developing a nicer LED blinker

TOBE DONE

!!!Our use case
We want to create a blinker LED using a few parameters such as time to repeat the blinking LED and how many seconds to wait between blinks. The following code should run in the playground when we finish this lesson:

[[[
| blinker |
blinker := Blinker new.
blinker timesRepeat: 10 waitForSeconds: 1.
]]]

Here is a short explanation of this code:

- In the first line, we declare the variable ==blinker==. We can use any name. We will use this variable to create an object using the Blinker class;
- In the second line, we instantiate the Blinker class (with uppercase B) in the ==blinker== variable, creating an object. In this lesson, we will create this class and methods to control the LED;
- In the third line, we send some messages to the ==blinker== object, for how long and how many times per second. This will make the GPIO behave according to the parameters sent.

Now we will develop all the mandatory class and methods to support this scenario.


!

!!!Save your work

Don't forget to save your work remotely. To do this, run this command on your local playground:

[[[
remotePharo saveImage.
]]]

This expression will save the complete Pharo environment running on your remote system.
If your raspberry crashes you will get exactly the same environment that from the moment you saved it. 

!!!Conclusion

In this tutorial, you learned how to define packages, classes, and methods. The flow of programming that we chose for this first tutorial is similar to most of the programming languages.

With PharoThings you can remotely develop and manage your Raspberry GPIOs. Very easy and powerful.

In the next lesson, let’s use what we learned in this lesson and write a simple code to flow lights using 8 LEDs.
