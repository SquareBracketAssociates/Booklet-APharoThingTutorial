!! Lesson 12 - Building a Webserver on Raspberry

In previous lessons, we learned how to control LEDs, sensors, LCD displays and how to use OOP to build a Mini-Weather Station. 
Now we are going to build a Webserver to interact with GPIOs.
We will used the HTTP server named Zinc available by default in Pharo. 
For more complex servers, Pharoers uses either Teapot a layer on top of Zinc or Seaside a full web application server.

!!! What do we need?

Empty please fill me :)

!!!! Components

- 1 Raspberry Pi connected to your network (wired or wireless)
- Jumper wires

!!! Experimental procedure

First of all, you have to create a class to implement the web app for the weather station :

[[[
Object subclass: #WeatherStationWebApp
	instanceVariableNames: ''
	classVariableNames: ''
	package: 'PharoThings-Lessons'
]]]

and implement the following methods:

The method ==handleRequest:== will generate an answer that consists in an HTML page
that we define just after. 
[[[
WeatherStationWebApp >> handleRequest: request
	request uri path = #sensors
		ifFalse: [ ^ ZnResponse notFound: request uri ].
	^ ZnResponse ok: (ZnEntity html: self html)
]]]

[[[
WeatherStationWebApp >> temperature
	^ 0
]]]

[[[
WeatherStationWebApp >> value: request
	^ self handleRequest: request
]]]

!!! HTML page
We define now the HTML that will be returned by the server. 

[[[
html
	^ '<html>
   <head>
      <title>Remote control</title>
      <!-- Bootstrap core CSS -->
      <link href="https://getbootstrap.com/docs/4.0/dist/css/bootstrap.min.css" rel="stylesheet">
   </head>
   <body >
      <main role="main">
         <section class="jumbotron text-center">
            <div class="container">
               <h1 class="jumbotron-heading">Remote control</h1>
               <p class="lead text-muted">Temperature: 28Â°C</p>
               <p class="lead text-muted">Humidity: 42%C</p>
               <p class="lead text-muted">Pressure: 1017 hPa</p>
               <p class="lead text-muted">Fan state:
                  <button type="button" class="btn btn-success" disabled="disabled">ON</button>
               </p>
               <p>
                  <a href="#" class="btn btn-primary my-2">Turn ON</a>
                  <a href="#" class="btn btn-secondary my-2">Turn OFF</a>
               </p>
            </div>
         </section>
      </main>
      <!-- Bootstrap core JavaScript -->
      <script src="https://code.jquery.com/jquery-3.2.1.slim.min.js"></script>
   </body>
</html>'
]]]

!!! Starting the server

Then you can start the Zn webserver like that:

[[[
ZnServer startDefaultOn: 8080.
ZnServer default delegate map: #image to: MyFirstWebApp new.
]]]

This page looks like the Picture *@WebPage*. 

+Web Page.>figures/pharothings-webpage.png|width=85|label=WebPage+

