!! Blinking LEDs

Now we can play with the LEDs, turn them on and off. Let's use this basic setup to write some code on the inspector playground to blink the LED. Next, we will learn how to remotely create a very simple application using classes, methods, and instances to control the LED.

!!! What do we need?

We are using the same setup as the last section: 1 Raspberry Pi, 1 Breadboard, 1 LED, 1 Resistor 330 ohms. If you didn't do the last lesson to understand how to do the connections, go back to Chapter 2 and do it.

!!!!Connecting remotely
Through your local Pharo image, let's connect to the Pharo image by running on Raspberry, enable the auto-refresh feature of the inspector, and open the inspector.

Run this code in your local playground:

[[[
remotePharo := TlpRemoteIDE connectTo: (TCPAddress ip: #[193 51 236 212] port: 40423).
GTInspector enableStepRefresh.
remoteBoard := remotePharo evaluate: [ RpiBoard3B current].
remoteBoard inspect.
]]]

!!! Experimental code
In your inspect window (Inspector on a PotRemoteBoard), let's initialize the led and set the pin 7 to be in digital output mode as we did in the last lesson:

[[[
led := gpio7.
led beDigitalOutput.
]]]

To blink the LED let's create a simple loop using the message ==timesRepeat:== to change the value of the LED every 1 second. 
For this we create a delay using the message ==Delay forSeconds: 1==.
To change the value of the pin from on to off and the inverse, we call the method ==toggleDigitalValue==, as we saw previously:

[[[
6 timesRepeat: [
	led toggleDigitalValue.
 	(Delay forSeconds: 1) wait
	] 
]]]

Run this code, as shown in Figure *@RemoteInspector* and... ==cool==! Now your LED is blinking!

+Remote playground.>figures/pharothings-board-inspector-blink-led.png|width=70|label=RemoteInspector+

Change the values to repeat more times and to wait less time between toggling. This will cause the LED to blink faster.

You can also run the code in a separate process if you do not want to get your Pharo environment to get blocked.
[[[
[ 10 timesRepeat: [
	led toggleDigitalValue.
 	(Delay forSeconds: 1) wait
	] ] forkNamed: 'BlinkerProcess'.
]]]


!!!In the next lesson

In this tutorial, you learned how to blink a LED by typing some code in the remote inspector. But with Pharo we can do more! And in the next lesson, let’s start to use OOP (object-oriented programming). Let's create a simple application, write classes and methods, all remotely.
